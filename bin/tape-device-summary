#!/usr/bin/env raku

use Async::Command::Multi;
use Our::Cache;
use Getopt::Long;
use Our::Grid;
use Our::Grid::Cell;
use JSON::Fast;
use Our::Utilities;

use Data::Dump::Tree;
#use Grammar::Debugger;

my %command;
my %results;
my %servers;
my %pl2fcs;

my class FCS-Device {
    has Str             $.physical-location;
    has Str             $.world-wide-node-name;
    has Str             $.world-wide-port-name;
    has                 @!drives;
}

grammar FCS-grammar {
    token TOP {
        ^
        <fcs-record>+
    }
    token fcs-record {
        \s+ <fcs-device> \s+  
        .+?
        Network \s Address '.'+ <network-address>
        .+?
        Device \s Specific.\(Z8\) '.'+ <Z8>
        .+?
        Hardware \s Location \s Code '.'+ <hardware-location>
        .+?
    }
    token fcs-device        { fcs <fcs-number>                      }
    token fcs-number        { \d+                                   }
    token network-address   { <[0..9A..F]> ** 16                    }
    token Z8                { <[0..9A..F]> ** 16                    }
    token hardware-location { \w+ '.' \w+ '.' <[0..9A..F]>+ .+? $$  }
}

class FCS-actions {
    has $.server  is required;

    method fcs-record ($/) {
        my Int $fcs-number = +$/<fcs-device><fcs-number>;
        %pl2fcs{$!server}{~$/<hardware-location>} = $fcs-number;
        %servers{$!server}<FCS>[$fcs-number] = FCS-Device.new:
            :physical-location(~$/<hardware-location>),
            :world-wide-node-name(~$/<Z8>),
            :world-wide-port-name(~$/<network-address>
        );
    }
}

my class RMT-Device {
    has Int             $.rmt-number;
    has Str             $.physical-location;
    has Str             $.host-model;
    has Str             $.host-type;
    has Str             $.host-serial;
    has Str             $.vadapter;
    has Str             $.vslot;
    has Str             $.vport;
    has Str             $.target-WWPN;
    has Str             $.target-LUN;
    has Str             $.device-model;
    has Str             $.device-type;
    has Str             $.serial-number;
    has Str             $.firmware;
    has Int             $.parent-fcs-adapter;
    has                 @!smcs;
    method push-smc (Str:D $smc where * ~~ /^ smc \d+ $/) { @!smcs.push: $smc; }
    method smcs () { return @!smcs.join(', '); }
}

grammar RMT-grammar {
    token TOP {
        ^
        <rmt-record>+
    }
    token rmt-record {
        \s+ <rmt-device> \s+
        <physical-location>
        '-'
        <target>
        .+?
        Machine \s Type \s and \s Model '.'+ <drive-type-model>
        .+?
        Serial \s Number '.'+ <serial-number>
        .+?
        Device \s Specific '.' \(FW\) '.'+ <firmware>
        $$
    }
    token rmt-device        { rmt <rmt-number>                      }
    token rmt-number        { \d+                                   }
    token physical-location {
        <host-model>
        '.'
        <host-type>
        '.'
        <host-serial>
        '-'
        <vadapter>
        '-'
        <vslot>
        '-'
        <vport>
    }
    token host-model        { \w+                                   }
    token host-type         { \w+                                   }
    token host-serial       { \w+                                   }
    token vadapter          { \w+                                   }
    token vslot             { C \w+                                 }
    token vport             { T \w+                                 }
    token target            { <target-WWPN> '-' <target-LUN>        }
    token target-WWPN        { W <[0..9A..F]> ** 16                 }
    token target-LUN        { L \w+                                 }
    token drive-type-model  { <device-model> '-' <device-type>      }
    token device-model      { \w+                                   }
    token device-type       { \w+                                   }
    token serial-number     { \w+                                   }
    token firmware          { \w+                                   }
}

class RMT-actions {
    has $.server  is required;

    method rmt-record ($/) {
        my Int $rmt-number          = +$/<rmt-device><rmt-number>;
        my Int $parent-fcs-adapter  = %pl2fcs{$!server}{~$/<physical-location>};
        %servers{$!server}<RMT>[$rmt-number] = RMT-Device.new:
            :$rmt-number,
            :physical-location(~$/<physical-location>),
            :host-model(~$/<physical-location><host-model>),
            :host-type(~$/<physical-location><host-type>),
            :host-serial(~$/<physical-location><host-serial>),
            :vadapter(~$/<physical-location><vadapter>),
            :vslot(~$/<physical-location><vslot>),
            :vport(~$/<physical-location><vport>),
            :target-WWPN(~$/<target><target-WWPN>),
            :target-LUN(~$/<target><target-LUN>),
            :device-model(~$/<drive-type-model><device-model>),
            :device-type(~$/<drive-type-model><device-type>),
            :serial-number(~$/<serial-number>),
            :firmware(~$/<firmware>),
            :$parent-fcs-adapter,
        ;
    }
}

my class SMC-Device {
    has Int             $.smc-number;
    has Str             $.physical-location;
    has Str             $.host-model;
    has Str             $.host-type;
    has Str             $.host-serial;
    has Str             $.vadapter;
    has Str             $.vslot;
    has Str             $.vport;
    has Str             $.target-WWPN;
    has Str             $.target-LUN;
    has Str             $.device-type-model;
    has Str             $.serial-number;
    has Str             $.firmware;
    has Int             $.parent-fcs-adapter;
    has                 @!rmts;
    method push-rmt (Str:D $rmt where * ~~ /^ rmt \d+ $/) { @!rmts.push: $rmt; }
    method rmts () { return @!rmts.join(', '); }
}

grammar SMC-grammar {
    token TOP {
        ^
        <smc-record>+
    }
    token smc-record {
        \s+ <smc-device> \s+
        <physical-location>
        '-'
        <target>
        .+?
        Machine \s Type \s and \s Model '.'+ <drive-type-model>
        .+?
        Serial \s Number '.'+ <serial-number>
        .+?
        Device \s Specific '.' \(FW\) '.'+ <firmware>
        $$
    }
    token smc-device        { smc <smc-number>                      }
    token smc-number        { \d+                                   }
    token physical-location {
        <host-model>
        '.'
        <host-type>
        '.'
        <host-serial>
        '-'
        <vadapter>
        '-'
        <vslot>
        '-'
        <vport>
    }
    token host-model        { \w+                                   }
    token host-type         { \w+                                   }
    token host-serial       { \w+                                   }
    token vadapter          { \w+                                   }
    token vslot             { C \w+                                 }
    token vport             { T \w+                                 }
    token target            { <target-WWPN> '-' <target-LUN>        }
    token target-WWPN        { W <[0..9A..F]> ** 16                 }
    token target-LUN        { L \w+                                 }
    token drive-type-model  { .+?                                $$ }
    token serial-number     { \w+                                   }
    token firmware          { \w+                                   }
}

class SMC-actions {
    has $.server  is required;

    method smc-record ($/) {
        my Int $smc-number          = +$/<smc-device><smc-number>;
        my Int $parent-fcs-adapter  = %pl2fcs{$!server}{~$/<physical-location>};
        %servers{$!server}<SMC>[$smc-number] = SMC-Device.new:
            :$smc-number,
            :physical-location(~$/<physical-location>),
            :host-model(~$/<physical-location><host-model>),
            :host-type(~$/<physical-location><host-type>),
            :host-serial(~$/<physical-location><host-serial>),
            :vadapter(~$/<physical-location><vadapter>),
            :vslot(~$/<physical-location><vslot>),
            :vport(~$/<physical-location><vport>),
            :target-WWPN(~$/<target><target-WWPN>),
            :target-LUN(~$/<target><target-LUN>),
            :device-type-model(~$/<drive-type-model>.trim),
            :serial-number(~$/<serial-number>),
            :firmware(~$/<firmware>),
            :$parent-fcs-adapter,
        ;
    }
}

sub MAIN (
                            :@servers            = ('isplc01','isplm01'),   #= Server to query
    Bool                    :$csv,                                          #= Dump CSV to STDOUT
    Str                     :$grid-proxy-host   = '127.0.0.1',              #= Hostname of grid proxy for remote services
    Bool                    :$gui,                                          #= Graphical User Interface
    Bool                    :$html,                                         #= Dump HTML to STDOUT
    Bool                    :$json,                                         #= Dump JSON to STDOUT
#   Grid-Email-Formats      :$mail-body-format,                             #= Email body format
                            :$mail-body-format,                             #= Email body format
                            :$mail-from,                                    #= Email 'From:' addressee
                            :@mail-to,                                      #= Accumulate email 'To:' addressees
                            :@mail-cc,                                      #= Accumulate email 'Cc:' addressees
                            :@mail-bcc,                                     #= Accumulate email 'Bcc:' addressees
    Bool                    :$text,                                         #= TEXT print
    Bool                    :$tui,                                          #= Terminal User Interface
    Bool                    :$xml,                                          #= Dump XML to STDOUT
    Bool                    :$light-mode,                                   #= Reverse header highlight for light-mode
    Bool                    :$by-fcs,                                       #= Produce a report by fcs device
    Bool                    :$by-rmt,                                       #= Produce a report by rmt device
    Bool                    :$by-smc,                                       #= Produce a report by smc device
    Bool                    :$group-by-server,                              #= Group by AIX server
) {
    my Bool $mailing;
    my $from                = $mail-from;
    my $format              = $mail-body-format;
    if $mail-from && @mail-to.elems {
        die '--mail-from=<email-address> required to send mail!' unless $mail-from;
        die '--mail-to=<email-address[,email-address]> required to send mail!' unless @mail-to.elems;
        $from               = $mail-from[0] if $mail-from ~~ Array;
        $format             = $mail-body-format[0] if $mail-body-format ~~ Array;
        $mailing = True;
    }
    my $reverse-highlight   = $light-mode ?? True !! False;
    my $preferences-cache   = Our::Cache.new(:identifier<preferences>);
    my $preferences         = from-json($preferences-cache.fetch) if $preferences-cache.cache-hit;
    without $light-mode {
        $reverse-highlight  = $preferences<light-mode> if $preferences<light-mode>:exists;
    }
    $preferences-cache.store(:data(to-json({light-mode => $reverse-highlight})));

    for @servers.sort -> $server {
        %command{$server}   = [
            'ssh',
            $server,
            '-o', 'BatchMode=yes',
            '-o', 'PreferredAuthentications=publickey',
            'lscfg',
            '-vl',
            'fcs*',
        ];
    }

    %results                = Async::Command::Multi.new(:%command, :10time-out, :8batch).sow.reap;
    for %results.keys.sort -> $server {
        FCS-grammar.parse(%results{$server}.stdout-results, :actions(FCS-actions.new(:$server)));
        die 'No fcs adapters found!' unless %servers{$server}<FCS>.elems;
    }

    %command                = ();
    %results                = ();

    for @servers.sort -> $server {
        %command{$server}   = [
            'ssh',
            $server,
            '-o', 'BatchMode=yes',
            '-o', 'PreferredAuthentications=publickey',
            'lscfg',
            '-vl',
            'rmt*',
        ];
    }

    %results                = Async::Command::Multi.new(:%command, :10time-out, :8batch).sow.reap;
    for %results.keys.sort -> $server {
        RMT-grammar.parse(%results{$server}.stdout-results, :actions(RMT-actions.new(:$server)));
        note 'No rmt devices found!' unless %servers{$server}<RMT>.elems;
    }

    %command                = ();
    %results                = ();

    for @servers.sort -> $server {
        %command{$server}   = [
            'ssh',
            $server,
            '-o', 'BatchMode=yes',
            '-o', 'PreferredAuthentications=publickey',
            'lscfg',
            '-vl',
            'smc*',
        ];
    }

    %results                = Async::Command::Multi.new(:%command, :10time-out, :8batch).sow.reap;
    for %results.keys.sort -> $server {
        SMC-grammar.parse(%results{$server}.stdout-results, :actions(SMC-actions.new(:$server)));
        note 'No smc devices found!' unless %servers{$server}<SMC>.elems;
    }

    for %servers.keys.sort -> $server {
        for %servers{$server}<RMT>.list -> $rmt {
            for %servers{$server}<SMC>.list -> $smc {
                if $rmt.target-WWPN eq $smc.target-WWPN {
                    $rmt.push-smc('smc' ~ $smc.smc-number);
                }
            }
        }
        for %servers{$server}<SMC>.list -> $smc {
            for %servers{$server}<RMT>.list -> $rmt {
                if $smc.target-WWPN eq $rmt.target-WWPN {
                    $smc.push-rmt('rmt' ~ $rmt.rmt-number);
                }
            }
        }
    }

    my Our::Grid $grid;
    {
        $by-smc             {   $grid = by-smc(:$grid-proxy-host, :$reverse-highlight, :$group-by-server);  }
        $by-rmt             {   $grid = by-rmt(:$grid-proxy-host, :$reverse-highlight, :$group-by-server);  }
        default             {   $grid = by-fcs(:$grid-proxy-host, :$reverse-highlight, :$group-by-server);  }
    }

    {
        when $text          {   $grid.TEXT-print; proceed;  }
        when $html          {   $grid.HTML-print; proceed;  }
        when $csv           {   $grid.CSV-print;  proceed;  }
        when $json          {   $grid.JSON-print; proceed;  }
        when $mailing       {
                                $grid.send-proxy-mail-via-redis(
                                    :cro-host<127.0.0.1>,
                                    :22151cro-port,
                                    :mail-from($from),
                                    :@mail-to,
                                    :@mail-cc,
                                    :@mail-bcc,
                                    :$format,
                                );
        }
        when $xml           {   $grid.XML-print;  proceed;  }
        when $tui           {   $grid.TUI;        proceed;  }
        when $gui           {   $grid.GUI;        proceed;  }
        default             {   $grid.ANSI-print; }
    }
}

sub by-rmt (:$grid-proxy-host, :$reverse-highlight, :$group-by-server) {
    my Our::Grid $grid;
    if $group-by-server {
        $grid  .= new: :title('IBM AIX Tape Device Summary'), :$grid-proxy-host, :$reverse-highlight, :0group-by-column;
    }
    else {
        $grid  .= new: :title('IBM AIX Tape Device Summary'), :$grid-proxy-host, :$reverse-highlight;
    }
    $grid.add-heading('Server',                                                                                                                                     :justification<left>);
    $grid.add-heading('rmt',                                                                                                                                        :justification<left>);
    $grid.add-heading('Physical Location',                                                                                                                          :justification<left>);
    $grid.add-heading('WW Node Name',                                                                                                                               :justification<left>);
    $grid.add-heading('WW Port Name',                                                                                                                               :justification<left>);
    $grid.add-heading('Tape Drives',                                                                                                                                :justification<left>);
    $grid.add-heading('Tape Drive Serial #',                                                                                                                        :justification<left>);

    for %servers.keys.sort -> $server {
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($server), :bold,                                                                                             :justification<left>)), :0col);
        for %servers{$server}<FCS>.keys.sort -> $fcs-number {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text('fcs' ~ $fcs-number),                                                                                    :justification<left>)), :1col);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%servers{$server}<FCS>[$fcs-number].physical-location),                                                  :justification<left>)), :2col);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%servers{$server}<FCS>[$fcs-number].world-wide-node-name),                                               :justification<left>)), :3col);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%servers{$server}<FCS>[$fcs-number].world-wide-port-name),                                               :justification<left>)), :4col);
            for %servers{$server}<RMT>.list -> $rmt-obj {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text('rmt' ~ $rmt-obj.rmt-number),                                                                        :justification<left>)), :5col);
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($rmt-obj.serial-number),                                                                             :justification<left>)), :6col);
                $grid.current-row++;
            }
        }
    }
    return $grid;
}

sub by-fcs (:$grid-proxy-host, :$reverse-highlight, :$group-by-server) {
    my Our::Grid $grid;
    if $group-by-server {
        $grid  .= new: :title('IBM AIX Tape Device Summary'), :$grid-proxy-host, :$reverse-highlight, :0group-by-column;
    }
    else {
        $grid  .= new: :title('IBM AIX Tape Device Summary'), :$grid-proxy-host, :$reverse-highlight;
    }
    $grid.add-heading('Server',                                                                                                                                     :justification<left>);
    $grid.add-heading('fcs',                                                                                                                                        :justification<left>);
    $grid.add-heading('Physical Location',                                                                                                                          :justification<left>);
    $grid.add-heading('WW Node Name',                                                                                                                               :justification<left>);
    $grid.add-heading('WW Port Name',                                                                                                                               :justification<left>);
    $grid.add-heading('Tape Drives',                                                                                                                                :justification<left>);
    $grid.add-heading('Tape Drive Serial #',                                                                                                                        :justification<left>);

    for %servers.keys.sort -> $server {
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($server), :bold,                                                                                             :justification<left>)), :0col);
        for %servers{$server}<FCS>.keys.sort -> $fcs-number {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text('fcs' ~ $fcs-number),                                                                                    :justification<left>)), :1col);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%servers{$server}<FCS>[$fcs-number].physical-location),                                                  :justification<left>)), :2col);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%servers{$server}<FCS>[$fcs-number].world-wide-node-name),                                               :justification<left>)), :3col);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%servers{$server}<FCS>[$fcs-number].world-wide-port-name),                                               :justification<left>)), :4col);
            for %servers{$server}<RMT>.list -> $rmt-obj {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text('rmt' ~ $rmt-obj.rmt-number),                                                                        :justification<left>)), :5col);
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($rmt-obj.serial-number),                                                                             :justification<left>)), :6col);
                $grid.current-row++;
            }
        }
    }
    return $grid;
}

=finish
